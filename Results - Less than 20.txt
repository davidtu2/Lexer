Lexeme: function            	Token: Keyword
Lexeme: convert             	Token: Identifier
Lexeme: (                   	Token: Separator
Lexeme: fahr                	Token: Identifier
Lexeme: :                   	Token: Separator
Lexeme: int                 	Token: Identifier
Lexeme: )                   	Token: Separator
Lexeme: {                   	Token: Separator
Lexeme: return              	Token: Keyword
Lexeme: 5                   	Token: Integer
Lexeme: *                   	Token: Operator
Lexeme: (                   	Token: Separator
Lexeme: fahr                	Token: Identifier
Lexeme: -                   	Token: Operator
Lexeme: 32                  	Token: Integer
Lexeme: )                   	Token: Separator
Lexeme: /                   	Token: Operator
Lexeme: 9                   	Token: Integer
Lexeme: ;                   	Token: Separator
Lexeme: }                   	Token: Separator
Lexeme: $$                  	Token: Separator
Lexeme: integer             	Token: Keyword
Lexeme: low                 	Token: Identifier
Lexeme: ,                   	Token: Separator
Lexeme: high                	Token: Identifier
Lexeme: ,                   	Token: Separator
Lexeme: step                	Token: Identifier
Lexeme: ;                   	Token: Separator
Lexeme: $$                  	Token: Separator
Lexeme: scanf               	Token: Keyword
Lexeme: (                   	Token: Separator
Lexeme: low                 	Token: Identifier
Lexeme: ,                   	Token: Separator
Lexeme: high                	Token: Identifier
Lexeme: ,                   	Token: Separator
Lexeme: step                	Token: Identifier
Lexeme: )                   	Token: Separator
Lexeme: ;                   	Token: Separator
Lexeme: while               	Token: Keyword
Lexeme: (                   	Token: Separator
Lexeme: low                 	Token: Identifier
Lexeme: <                   	Token: Operator
Lexeme: high                	Token: Identifier
Lexeme: )                   	Token: Separator
Lexeme: {                   	Token: Separator
Lexeme: printf              	Token: Keyword
Lexeme: (                   	Token: Separator
Lexeme: low                 	Token: Identifier
Lexeme: )                   	Token: Separator
Lexeme: ;                   	Token: Separator
Lexeme: Printf              	Token: Identifier
Lexeme: (                   	Token: Separator
Lexeme: convert             	Token: Identifier
Lexeme: (                   	Token: Separator
Lexeme: low                 	Token: Identifier
Lexeme: )                   	Token: Separator
Lexeme: )                   	Token: Separator
Lexeme: ;                   	Token: Separator
Lexeme: low                 	Token: Identifier
Lexeme: :=                  	Token: Operator
Lexeme: low                 	Token: Identifier
Lexeme: +                   	Token: Operator
Lexeme: step                	Token: Identifier
Lexeme: ;                   	Token: Separator
Lexeme: }                   	Token: Separator
Lexeme: $$                  	Token: Separator
